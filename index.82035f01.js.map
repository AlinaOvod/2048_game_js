{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/scripts/grid.js","src/scripts/cell.js","src/scripts/tile.js"],"sourcesContent":["class $e3f2d471551ea10d$export$f6f0c3fe4ec306ea {\n    constructor(gridElement, x, y, grid){\n        const cell = document.createElement(\"div\");\n        cell.classList.add(\"field-cell\");\n        gridElement.append(cell);\n        this.x = x;\n        this.y = y;\n        this.grid = grid;\n    }\n    linkTile(tile) {\n        tile.setXY(this.x, this.y);\n        this.linkedTile = tile;\n    }\n    unlinkTile() {\n        this.linkedTile = null;\n    }\n    isEmpty() {\n        return !this.linkedTile;\n    }\n    linkTileForMerge(tile) {\n        tile.setXY(this.x, this.y);\n        this.linkedTileForMerge = tile;\n    }\n    unlinkTileForMerge() {\n        this.linkedTileForMerge = null;\n    }\n    hasTileForMerge() {\n        return !!this.linkedTileForMerge;\n    }\n    canAccept(newTile) {\n        return this.isEmpty() || !this.hasTileForMerge() && this.linkedTile.value === newTile.value;\n    }\n    mergeTiles() {\n        const mergedValue = this.linkedTile.value + this.linkedTileForMerge.value;\n        this.linkedTile.setValue(mergedValue);\n        this.linkedTileForMerge.removeFromDOM();\n        this.unlinkTileForMerge();\n        const score = mergedValue;\n        this.grid.updateTotalScore(score);\n        return this.score += score;\n    }\n}\n\n\nclass $8d16fdf861134c32$export$235cb65c20ad2b7 {\n    constructor(gridElement){\n        this.tileElement = document.createElement(\"div\");\n        this.tileElement.classList.add(\"field-tile\");\n        this.setValue(Math.random() > 0.1 ? 2 : 4);\n        gridElement.append(this.tileElement);\n    }\n    setXY(x, y) {\n        this.x = x;\n        this.y = y;\n        this.tileElement.style.setProperty(\"--x\", x);\n        this.tileElement.style.setProperty(\"--y\", y);\n    }\n    setValue(value) {\n        this.value = value;\n        this.tileElement.textContent = value;\n        const bgLightness = 100 - Math.log2(value) * 8;\n        this.tileElement.style.setProperty(\"--bg-lightness\", `${bgLightness}%`);\n        this.tileElement.style.setProperty(\"--text-lightness\", `${bgLightness < 60 ? 100 : 30}%`);\n    }\n    removeFromDOM() {\n        this.tileElement.remove();\n    }\n}\n\n\nconst $d127f00a76274e78$var$GRID_SIZE = 4;\nconst $d127f00a76274e78$var$CELLS_COUNT = $d127f00a76274e78$var$GRID_SIZE * $d127f00a76274e78$var$GRID_SIZE;\nclass $d127f00a76274e78$export$ef2184bd89960b14 {\n    constructor(gridElement){\n        this.cells = [];\n        this.totalScore = 0;\n        for(let i = 0; i < $d127f00a76274e78$var$CELLS_COUNT; i++)this.cells.push(new (0, $e3f2d471551ea10d$export$f6f0c3fe4ec306ea)(gridElement, i % $d127f00a76274e78$var$GRID_SIZE, Math.floor(i / $d127f00a76274e78$var$GRID_SIZE), this));\n        this.cellsGroupedByColumn = this.groupCellsByColumn();\n        this.cellsGroupedByReversedColumn = this.cellsGroupedByColumn.map((column)=>[\n                ...column\n            ].reverse());\n        this.cellsGroupedByRow = this.groupCellsByRow();\n        this.cellsGroupedByReversedRow = this.cellsGroupedByRow.map((row)=>[\n                ...row\n            ].reverse());\n    }\n    getRandomEmptyCell() {\n        const emptyCells = this.cells.filter((cell)=>cell.isEmpty());\n        const randomIndex = Math.floor(Math.random() * emptyCells.length);\n        return emptyCells[randomIndex];\n    }\n    groupCellsByColumn() {\n        return this.cells.reduce((groupedCells, cell)=>{\n            groupedCells[cell.x] = groupedCells[cell.x] || [];\n            groupedCells[cell.x][cell.y] = cell;\n            return groupedCells;\n        }, []);\n    }\n    groupCellsByRow() {\n        return this.cells.reduce((groupedCells, cell)=>{\n            groupedCells[cell.y] = groupedCells[cell.y] || [];\n            groupedCells[cell.y][cell.x] = cell;\n            return groupedCells;\n        }, []);\n    }\n    reset() {\n        this.cells.forEach((cell)=>{\n            if (!cell.isEmpty()) {\n                cell.linkedTile.removeFromDOM();\n                cell.unlinkTile();\n            }\n        });\n    }\n    updateTotalScore(score) {\n        this.lastMerge = score;\n        this.totalScore += score;\n    }\n}\n\n\n\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$gameBoard = document.getElementById(\"game-board\");\nconst $09e991522ca7e64e$var$grid = new (0, $d127f00a76274e78$export$ef2184bd89960b14)($09e991522ca7e64e$var$gameBoard);\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageRestart = document.querySelector(\".message-restart\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$button.classList.contains(\"restart\")) $09e991522ca7e64e$var$restartGame();\n    else {\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n        $09e991522ca7e64e$var$button.innerHTML = \"Restart\";\n        $09e991522ca7e64e$var$restartGame();\n        $09e991522ca7e64e$var$messageRestart.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    }\n});\nfunction $09e991522ca7e64e$var$setupInputOnce() {\n    window.addEventListener(\"keydown\", $09e991522ca7e64e$var$handleInput, {\n        once: true\n    });\n}\nfunction $09e991522ca7e64e$var$handleInput(event) {\n    switch(event.key){\n        case \"ArrowUp\":\n            if (!$09e991522ca7e64e$var$canMoveUp()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            $09e991522ca7e64e$var$moveUp();\n            break;\n        case \"ArrowDown\":\n            if (!$09e991522ca7e64e$var$canMoveDown()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            $09e991522ca7e64e$var$moveDown();\n            break;\n        case \"ArrowLeft\":\n            if (!$09e991522ca7e64e$var$canMoveLeft()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            $09e991522ca7e64e$var$moveLeft();\n            break;\n        case \"ArrowRight\":\n            if (!$09e991522ca7e64e$var$canMoveRight()) {\n                $09e991522ca7e64e$var$setupInputOnce();\n                return;\n            }\n            $09e991522ca7e64e$var$moveRight();\n            break;\n        default:\n            $09e991522ca7e64e$var$setupInputOnce();\n            return;\n    }\n    const newTile = new (0, $8d16fdf861134c32$export$235cb65c20ad2b7)($09e991522ca7e64e$var$gameBoard);\n    $09e991522ca7e64e$var$grid.getRandomEmptyCell().linkTile(newTile);\n    if (!$09e991522ca7e64e$var$canMoveUp() && !$09e991522ca7e64e$var$canMoveDown() && !$09e991522ca7e64e$var$canMoveLeft() && !$09e991522ca7e64e$var$canMoveRight()) {\n        $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageRestart.classList.add(\"hidden\");\n    }\n    $09e991522ca7e64e$var$setupInputOnce();\n}\nfunction $09e991522ca7e64e$var$moveUp() {\n    $09e991522ca7e64e$var$slideTiles($09e991522ca7e64e$var$grid.cellsGroupedByColumn);\n    $09e991522ca7e64e$var$updateGameScore();\n}\nfunction $09e991522ca7e64e$var$moveDown() {\n    $09e991522ca7e64e$var$slideTiles($09e991522ca7e64e$var$grid.cellsGroupedByReversedColumn);\n    $09e991522ca7e64e$var$updateGameScore();\n}\nfunction $09e991522ca7e64e$var$moveLeft() {\n    $09e991522ca7e64e$var$slideTiles($09e991522ca7e64e$var$grid.cellsGroupedByRow);\n    $09e991522ca7e64e$var$updateGameScore();\n}\nfunction $09e991522ca7e64e$var$moveRight() {\n    $09e991522ca7e64e$var$slideTiles($09e991522ca7e64e$var$grid.cellsGroupedByReversedRow);\n    $09e991522ca7e64e$var$updateGameScore();\n}\nfunction $09e991522ca7e64e$var$slideTiles(groupedCells) {\n    groupedCells.forEach((group)=>$09e991522ca7e64e$var$slideTilesInGroup(group));\n    $09e991522ca7e64e$var$grid.cells.forEach((cell)=>{\n        cell.hasTileForMerge() && cell.mergeTiles();\n    });\n    $09e991522ca7e64e$var$setupInputOnce();\n}\nfunction $09e991522ca7e64e$var$slideTilesInGroup(group) {\n    for(let i = 0; i < group.length; i++){\n        if (group[i].isEmpty()) continue;\n        const cellWithTile = group[i];\n        let targetCell;\n        let j = i - 1;\n        while(j >= 0 && group[j].canAccept(cellWithTile.linkedTile)){\n            targetCell = group[j];\n            j--;\n        }\n        if (!targetCell) continue;\n        if (targetCell.isEmpty()) targetCell.linkTile(cellWithTile.linkedTile);\n        else targetCell.linkTileForMerge(cellWithTile.linkedTile);\n        cellWithTile.unlinkTile();\n    }\n}\nfunction $09e991522ca7e64e$var$canMoveUp() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$grid.cellsGroupedByColumn);\n}\nfunction $09e991522ca7e64e$var$canMoveDown() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$grid.cellsGroupedByReversedColumn);\n}\nfunction $09e991522ca7e64e$var$canMoveLeft() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$grid.cellsGroupedByRow);\n}\nfunction $09e991522ca7e64e$var$canMoveRight() {\n    return $09e991522ca7e64e$var$canMove($09e991522ca7e64e$var$grid.cellsGroupedByReversedRow);\n}\nfunction $09e991522ca7e64e$var$canMove(groupedCells) {\n    return groupedCells.some((group)=>$09e991522ca7e64e$var$canMoveInGroup(group));\n}\nfunction $09e991522ca7e64e$var$canMoveInGroup(group) {\n    return group.some((cell, index)=>{\n        if (index === 0) return false;\n        if (cell.isEmpty()) return false;\n        const targetCell = group[index - 1];\n        return targetCell.canAccept(cell.linkedTile);\n    });\n}\nfunction $09e991522ca7e64e$var$updateGameScore() {\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$grid.totalScore;\n    if ($09e991522ca7e64e$var$grid.lastMerge === 2048) {\n        $09e991522ca7e64e$var$messageRestart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n    }\n}\nfunction $09e991522ca7e64e$var$restartGame() {\n    $09e991522ca7e64e$var$grid.reset();\n    $09e991522ca7e64e$var$grid.totalScore = 0;\n    $09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$grid.totalScore;\n    $09e991522ca7e64e$var$grid.getRandomEmptyCell().linkTile(new (0, $8d16fdf861134c32$export$235cb65c20ad2b7)($09e991522ca7e64e$var$gameBoard));\n    $09e991522ca7e64e$var$grid.getRandomEmptyCell().linkTile(new (0, $8d16fdf861134c32$export$235cb65c20ad2b7)($09e991522ca7e64e$var$gameBoard));\n    $09e991522ca7e64e$var$messageRestart.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    if (!$09e991522ca7e64e$var$messageWin.classList.contains(\"hidden\")) $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$setupInputOnce();\n}\n\n\n//# sourceMappingURL=index.82035f01.js.map\n","import { Grid } from './grid.js';\nimport { Tile } from './tile.js';\n\nconst button = document.querySelector('.button');\nconst gameBoard = document.getElementById('game-board');\nconst grid = new Grid(gameBoard);\n\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst messageStart = document.querySelector('.message-start');\nconst messageRestart = document.querySelector('.message-restart');\n\nconst gameScore = document.querySelector('.game-score');\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('restart')) {\n\n    restartGame();\n  } else {\n    button.classList.remove('start');\n    button.classList.add('restart');\n    button.innerHTML = 'Restart';\n\n    restartGame();\n\n    messageRestart.classList.remove('hidden');\n    messageStart.classList.add('hidden');\n  }\n});\n\nfunction setupInputOnce() {\n  window.addEventListener('keydown', handleInput, {once: true});\n}\n\nfunction handleInput(event) {\n  switch (event.key) {\n    case 'ArrowUp':\n      if(!canMoveUp()) {\n        setupInputOnce();\n        return;\n      }\n      moveUp();\n      break;\n\n    case 'ArrowDown':\n      if(!canMoveDown()) {\n        setupInputOnce();\n        return;\n      }\n      moveDown();\n      break;\n\n    case 'ArrowLeft':\n      if(!canMoveLeft()) {\n        setupInputOnce();\n        return;\n      }\n      moveLeft();\n      break;\n\n    case 'ArrowRight':\n      if(!canMoveRight()) {\n        setupInputOnce();\n        return;\n      }\n      moveRight();\n      break;\n\n    default:\n      setupInputOnce();\n      return;\n  }\n\n  const newTile = new Tile(gameBoard);\n  grid.getRandomEmptyCell().linkTile(newTile);\n\n  if (!canMoveUp() && !canMoveDown() && !canMoveLeft() && !canMoveRight()) {\n    messageLose.classList.remove('hidden');\n    messageStart.classList.add('hidden');\n    messageRestart.classList.add('hidden');\n  }\n\n  setupInputOnce();\n}\n\nfunction moveUp() {\n  slideTiles(grid.cellsGroupedByColumn);\n  updateGameScore();\n}\n\nfunction moveDown() {\n  slideTiles(grid.cellsGroupedByReversedColumn);\n  updateGameScore();\n}\n\nfunction moveLeft() {\n  slideTiles(grid.cellsGroupedByRow);\n  updateGameScore();\n}\n\nfunction moveRight() {\n  slideTiles(grid.cellsGroupedByReversedRow);\n  updateGameScore();\n}\n\nfunction slideTiles(groupedCells) {\n  groupedCells.forEach(group => slideTilesInGroup(group));\n\n  grid.cells.forEach(cell => {\n    cell.hasTileForMerge() && cell.mergeTiles();\n  });\n\n  setupInputOnce();\n}\n\nfunction slideTilesInGroup(group) {\n  for (let i = 0; i < group.length; i++) {\n    if (group[i].isEmpty()) {\n      continue;\n    }\n\n    const cellWithTile = group[i];\n\n    let targetCell;\n    let j = i - 1;\n    while(j >= 0 && group[j].canAccept(cellWithTile.linkedTile)) {\n      targetCell = group[j];\n      j--;\n    }\n\n    if (!targetCell) {\n      continue;\n    }\n\n    if (targetCell.isEmpty()) {\n      targetCell.linkTile(cellWithTile.linkedTile);\n    } else {\n      targetCell.linkTileForMerge(cellWithTile.linkedTile);\n    }\n\n    cellWithTile.unlinkTile();\n  }\n}\n\nfunction canMoveUp() {\n  return canMove(grid.cellsGroupedByColumn);\n}\n\nfunction canMoveDown() {\n  return canMove(grid.cellsGroupedByReversedColumn);\n}\n\nfunction canMoveLeft() {\n  return canMove(grid.cellsGroupedByRow);\n}\n\nfunction canMoveRight() {\n  return canMove(grid.cellsGroupedByReversedRow);\n}\n\nfunction canMove(groupedCells) {\n  return groupedCells.some(group => canMoveInGroup(group));\n}\n\nfunction canMoveInGroup(group) {\n  return group.some((cell, index) => {\n    if (index === 0)  {\n      return false;\n    }\n\n    if (cell.isEmpty()) {\n      return false;\n    }\n\n    const targetCell = group[index - 1];\n    return targetCell.canAccept(cell.linkedTile);\n  })\n}\n\nfunction updateGameScore() {\n  gameScore.textContent = grid.totalScore;\n\n  if (grid.lastMerge === 2048) {\n    messageRestart.classList.add('hidden');\n    messageWin.classList.remove('hidden');\n  }\n}\n\nfunction restartGame() {\n  grid.reset();\n  grid.totalScore = 0;\n  gameScore.textContent = grid.totalScore;\n\n  grid.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n  grid.getRandomEmptyCell().linkTile(new Tile(gameBoard));\n\n  messageRestart.classList.remove('hidden');\n  messageLose.classList.add('hidden');\n\n  if (!messageWin.classList.contains('hidden')) {\n    messageWin.classList.add ('hidden');\n  };\n\n  setupInputOnce();\n}\n","import { Cell } from './cell.js';\nimport { Tile } from './tile.js';\n\nconst GRID_SIZE = 4;\nconst CELLS_COUNT = GRID_SIZE * GRID_SIZE;\n\nexport class Grid {\n  constructor(gridElement) {\n    this.cells = [];\n    this.totalScore = 0;\n\n    for (let i = 0; i < CELLS_COUNT; i++) {\n      this.cells.push(\n        new Cell(gridElement, i % GRID_SIZE, Math.floor(i / GRID_SIZE), this)\n      );\n    }\n\n    this.cellsGroupedByColumn = this.groupCellsByColumn();\n    this.cellsGroupedByReversedColumn = this.cellsGroupedByColumn.map(column => [...column].reverse());\n\n    this.cellsGroupedByRow = this.groupCellsByRow();\n    this.cellsGroupedByReversedRow = this.cellsGroupedByRow.map(row => [...row].reverse());\n  }\n\n  getRandomEmptyCell() {\n    const emptyCells = this.cells.filter(cell => cell.isEmpty());\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    return emptyCells[randomIndex];\n  }\n\n  groupCellsByColumn() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.x] = groupedCells[cell.x] || [];\n      groupedCells[cell.x][cell.y] = cell;\n      return groupedCells;\n    }, [])\n  }\n\n  groupCellsByRow() {\n    return this.cells.reduce((groupedCells, cell) => {\n      groupedCells[cell.y] = groupedCells[cell.y] || [];\n      groupedCells[cell.y][cell.x] = cell;\n      return groupedCells;\n    }, [])\n  }\n\n  reset() {\n    this.cells.forEach(cell => {\n      if (!cell.isEmpty()) {\n        cell.linkedTile.removeFromDOM();\n        cell.unlinkTile();\n      }\n    });\n  }\n\n  updateTotalScore(score) {\n    this.lastMerge = score;\n    this.totalScore += score;\n  }\n}\n","export class Cell {\n  constructor(gridElement, x, y, grid) {\n    const cell = document.createElement('div');\n\n    cell.classList.add('field-cell');\n    gridElement.append(cell);\n    this.x = x;\n    this.y = y;\n    this.grid = grid;\n  }\n\n  linkTile(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTile = tile;\n  }\n\n  unlinkTile() {\n    this.linkedTile = null;\n  }\n\n  isEmpty() {\n    return !this.linkedTile;\n  }\n\n  linkTileForMerge(tile) {\n    tile.setXY(this.x, this.y);\n    this.linkedTileForMerge = tile;\n  }\n\n  unlinkTileForMerge() {\n    this.linkedTileForMerge = null;\n  }\n\n  hasTileForMerge() {\n    return !!this.linkedTileForMerge;\n  }\n\n  canAccept(newTile) {\n    return this.isEmpty() || (!this.hasTileForMerge() && this.linkedTile.value === newTile.value)\n  }\n\n  mergeTiles() {\n    const mergedValue = this.linkedTile.value + this.linkedTileForMerge.value;\n    this.linkedTile.setValue(mergedValue);\n\n    this.linkedTileForMerge.removeFromDOM();\n    this.unlinkTileForMerge();\n\n    const score = mergedValue;\n    this.grid.updateTotalScore(score);\n\n    return this.score += score;\n  }\n}\n","export class Tile {\n  constructor(gridElement) {\n    this.tileElement = document.createElement('div');\n    this.tileElement.classList.add('field-tile');\n    this.setValue(Math.random() > 0.1 ? 2 : 4);\n    gridElement.append(this.tileElement);\n  }\n\n  setXY(x, y) {\n    this.x = x;\n    this.y = y;\n\n    this.tileElement.style.setProperty('--x', x);\n    this.tileElement.style.setProperty('--y', y);\n  }\n\n  setValue(value) {\n    this.value = value;\n    this.tileElement.textContent = value;\n    const bgLightness = 100 - Math.log2(value) * 8;\n    this.tileElement.style.setProperty('--bg-lightness', `${bgLightness}%`);\n    this.tileElement.style.setProperty('--text-lightness', `${bgLightness < 60 ? 100 : 30}%`)\n  }\n\n  removeFromDOM() {\n    this.tileElement.remove();\n  }\n}\n"],"names":["$e3f2d471551ea10d$export$f6f0c3fe4ec306ea","constructor","gridElement","x","y","grid","cell","document","createElement","classList","add","append","linkTile","tile","setXY","linkedTile","unlinkTile","isEmpty","linkTileForMerge","linkedTileForMerge","unlinkTileForMerge","hasTileForMerge","canAccept","newTile","value","mergeTiles","mergedValue","setValue","removeFromDOM","updateTotalScore","score","$8d16fdf861134c32$export$235cb65c20ad2b7","tileElement","Math","random","style","setProperty","textContent","bgLightness","log2","remove","$09e991522ca7e64e$var$button","querySelector","$09e991522ca7e64e$var$gameBoard","getElementById","$09e991522ca7e64e$var$grid","cells","totalScore","i","$d127f00a76274e78$var$GRID_SIZE","push","floor","cellsGroupedByColumn","groupCellsByColumn","cellsGroupedByReversedColumn","map","column","reverse","cellsGroupedByRow","groupCellsByRow","cellsGroupedByReversedRow","row","getRandomEmptyCell","emptyCells","filter","randomIndex","length","reduce","groupedCells","reset","forEach","lastMerge","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageRestart","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$setupInputOnce","window","addEventListener","$09e991522ca7e64e$var$handleInput","once","event","key","$09e991522ca7e64e$var$canMoveUp","$09e991522ca7e64e$var$slideTiles","$09e991522ca7e64e$var$updateGameScore","$09e991522ca7e64e$var$canMoveDown","$09e991522ca7e64e$var$canMoveLeft","$09e991522ca7e64e$var$canMoveRight","group","$09e991522ca7e64e$var$slideTilesInGroup","targetCell","cellWithTile","j","$09e991522ca7e64e$var$canMove","some","index","$09e991522ca7e64e$var$restartGame","contains","innerHTML"],"version":3,"file":"index.82035f01.js.map"}